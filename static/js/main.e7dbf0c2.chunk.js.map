{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","App.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","shuffle","id","Wrapper","children","Title","Score","App","state","characters","clickedChar","score","checkWin","_this","alert","setState","sort","b","Math","random","concat","includes","_this2","this","components_Wrapper","components_Title","map","character","components_CharacterCard","key","components_Score","Component","setTimeout","ReactDOM","render","src_App","document","getElementById"],"mappings":"+5BAWeA,MARf,SAAuBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMU,QAAQV,EAAMW,eCCxEC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,iBCGvBE,MAJf,SAAef,GACb,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UAA6BJ,EAAMa,kBCsE7BG,6MAjEbC,MAAQ,CACNC,aACAC,YAAa,GACbC,MAAO,KAITC,SAAW,WACgB,KAArBC,EAAKL,MAAMG,QACbG,MAAM,wBACND,EAAKE,SAAS,CACZL,YAAa,GACbC,MAAO,QAMbV,QAAU,SAAAC,GAERW,EAAKE,SAAS,CAEZN,WAAYI,EAAKL,MAAMC,WAAWO,KAAK,SAAUvB,EAAGwB,GAClD,MAAO,GAAMC,KAAKC,WAGpBT,YAAaG,EAAKL,MAAME,YAAYU,OAAOlB,GAE3CS,MAAOE,EAAKL,MAAMG,MAAQ,IAIxBE,EAAKL,MAAME,YAAYW,SAASnB,KAClCY,MAAM,yBACND,EAAKE,SAAS,CACZL,YAAa,GACbC,MAAO,8EAOJ,IAAAW,EAAAC,KAGP,OADAA,KAAKX,WAEHpB,EAAAC,EAAAC,cAAC8B,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,sBACCF,KAAKf,MAAMC,WAAWiB,IAAI,SAAAC,GAAS,OAClCnC,EAAAC,EAAAC,cAACkC,EAAD,CACE1B,GAAIyB,EAAUzB,GACd2B,IAAKF,EAAUzB,GACfL,KAAM8B,EAAU9B,KAChBE,MAAO4B,EAAU5B,MACjBE,QAASqB,EAAKrB,YAGlBT,EAAAC,EAAAC,cAACoC,EAAD,KAAQP,KAAKf,MAAMG,eA5DToB,aCElBC,WAAW,WACPlB,MAAM,+GACP,MAEHmB,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e7dbf0c2.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction CharacterCard(props) {\n    return (\n        <div className=\"img-thumbnail\">\n            <img alt={props.name} src={props.image} onClick={() => props.shuffle(props.id)} />\n        </div>\n    );\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <p className=\"score\">Score: {props.children}</p>;\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    characters,\n    clickedChar: [],\n    score: 0\n  };\n\n  // Check if player has won.\n  checkWin = () => {\n    if (this.state.score === 12) {\n      alert(\"You won! Play again?\");\n      this.setState({\n        clickedChar: [],\n        score: 0\n      })\n    };\n  };\n\n  // Main logic function.\n  shuffle = id => {\n    // Change the (state) accordingly.\n    this.setState({\n      // Change the (state) render order of the characters object.\n      characters: this.state.characters.sort(function (a, b) {\n        return 0.5 - Math.random();\n      }),\n      // Add the id of the clicked character to the clickedChar array.\n      clickedChar: this.state.clickedChar.concat(id),\n      // Increase the score (state) if the character hasn't been clicked yet.\n      score: this.state.score + 1\n    });\n\n    // If the character has already been clicked, the game is lost and all states are reset.\n    if (this.state.clickedChar.includes(id)) {\n      alert(\"You lose! Play again?\");\n      this.setState({\n        clickedChar: [],\n        score: 0\n      })\n    };\n\n  };\n\n  // Render a CharacterCard component for each character object.\n  render() {\n    // Call the checkWin function before a character is clicked.\n    this.checkWin();\n    return (\n      <Wrapper>\n        <Title>Marvel Memory</Title>\n        {this.state.characters.map(character => (\n          <CharacterCard\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            shuffle={this.shuffle}\n          />\n        ))}\n        <Score>{this.state.score}</Score>\n      </Wrapper>\n    );\n  };\n\n};\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// Alert the instructions.\nsetTimeout(function () {\n    alert(\"Instructions: Don't pick the same character twice, pick all twelve characters and win the game. Good luck!\");\n}, 1500);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}